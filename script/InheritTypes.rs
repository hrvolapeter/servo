/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */
use dom::globalscope::GlobalScope;
use dom::element::Element;
use dom::node::Node;
use dom::window::Window;
use dom::bindings::conversions::DerivedFrom;
use dom::bindings::inheritance::Castable;

#[derive(Copy, Clone)]
pub union TopTypeId {
    pub alone: (),
    pub eventtarget: EventTargetTypeId,
}

#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EventTargetTypeId {
    EventTarget,
    Node(NodeTypeId),
}

#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NodeTypeId {
    DocumentFragment,
    DocumentType,
    Document(DocumentTypeId),
}

impl Castable for GlobalScope {}
impl DerivedFrom<GlobalScope> for GlobalScope {}

impl Castable for Element {}
impl DerivedFrom<Element> for Element {}
impl DerivedFrom<Node> for Element {}

impl Castable for Node {}
impl DerivedFrom<Node> for Node {}

impl Castable for Window {}
impl DerivedFrom<GlobalScope> for Window {}

#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DocumentTypeId {
    Document,
    XMLDocument
}
