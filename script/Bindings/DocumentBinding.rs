/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#![allow(non_camel_case_types,non_upper_case_globals,unused_imports,unused_variables,unused_assignments,unused_mut)]

pub mod DocumentBinding {
#![allow(non_camel_case_types,non_upper_case_globals,unused_imports,unused_variables,unused_assignments,unused_mut)]
use libc;
use mem::malloc_size_of_including_raw_self;
use std::borrow::ToOwned;
use std::cmp;
use std::default::Default;
use std::ffi::CString;
use std::mem;
use std::num;
use std::os;
use std::panic;
use std::ptr;
use std::ptr::NonNull;
use std::rc;
use std::rc::Rc;
use std::str;
use dom::bindings::proxyhandler;
use js::glue::ProxyTraps;
use dom::bindings::proxyhandler::get_property_descriptor;
use js::jsapi::JSContext;
use js::jsapi::AutoIdVector;
use js::jsapi::PropertyDescriptor;
use js::glue::CreateProxyHandler;
use js::jsapi::Handle as RawHandle;
use js::jsapi::HandleId as RawHandleId;
use js::jsapi::HandleObject as RawHandleObject;
use js::jsapi::HandleValue as RawHandleValue;
use js::jsapi::MutableHandle as RawMutableHandle;
use js::jsapi::MutableHandleObject as RawMutableHandleObject;
use js::jsapi::MutableHandleValue as RawMutableHandleValue;
use js::jsapi::JSObject;
use js::jsapi::JSFreeOp;
use js::jsapi::JSTracer;
use dom::bindings::codegen::PrototypeList;
use dom::bindings::utils::DOMClass;
use dom::document::Document;
use dom::bindings::codegen::InterfaceObjectMap;
use typeholder::TypeHolderTrait;


pub unsafe fn DefineProxyHandler<TH: TypeHolderTrait>() -> *const libc::c_void {
    let traps = ProxyTraps {
        enter: None,
        getOwnPropertyDescriptor: Some(getOwnPropertyDescriptor),
        defineProperty: Some(proxyhandler::define_property),
        ownPropertyKeys: Some(own_property_keys),
        delete_: Some(proxyhandler::delete),
        enumerate: None,
        getPrototypeIfOrdinary: Some(proxyhandler::get_prototype_if_ordinary),
        preventExtensions: Some(proxyhandler::prevent_extensions),
        isExtensible: Some(proxyhandler::is_extensible),
        has: None,
        get: Some(get),
        set: None,
        call: None,
        construct: None,
        getPropertyDescriptor: Some(get_property_descriptor),
        hasOwn: Some(hasOwn),
        getOwnEnumerablePropertyKeys: Some(own_property_keys),
        nativeCall: None,
        hasInstance: None,
        objectClassIs: None,
        className: Some(className),
        fun_toString: None,
        boxedValue_unbox: None,
        defaultValue: None,
        trace: Some(_trace),
        finalize: Some(_finalize),
        objectMoved: None,
        isCallable: None,
        isConstructor: None,
    };

    CreateProxyHandler(&traps, Class::<TH>().as_void_ptr())
}

fn Class<TH: TypeHolderTrait>() -> DOMClass { DOMClass {
    interface_chain: [ PrototypeList::ID::EventTarget, PrototypeList::ID::Node, PrototypeList::ID::Document, PrototypeList::ID::Last, PrototypeList::ID::Last, PrototypeList::ID::Last ],
    type_id: ::dom::bindings::codegen::InheritTypes::TopTypeId { eventtarget: (::dom::bindings::codegen::InheritTypes::EventTargetTypeId::Node(::dom::bindings::codegen::InheritTypes::NodeTypeId::Document(::dom::bindings::codegen::InheritTypes::DocumentTypeId::Document))) },
    malloc_size_of: malloc_size_of_including_raw_self::<Document<TH>> as unsafe fn(&mut _, _) -> _,
    global: InterfaceObjectMap::Globals::EMPTY,
}}

unsafe extern fn getOwnPropertyDescriptor(cx: *mut JSContext, proxy: RawHandleObject, id: RawHandleId, desc: RawMutableHandle<PropertyDescriptor>) -> bool {
    true
}


unsafe extern fn own_property_keys(cx: *mut JSContext, proxy: RawHandleObject, props: *mut AutoIdVector) -> bool {
    true
}


unsafe extern fn get(cx: *mut JSContext, proxy: RawHandleObject, receiver: RawHandleValue, id: RawHandleId, vp: RawMutableHandleValue) -> bool {
    true
}

unsafe extern fn hasOwn(cx: *mut JSContext, proxy: RawHandleObject, id: RawHandleId, bp: *mut bool) -> bool {
    true
}

unsafe extern fn className(cx: *mut JSContext, _proxy: RawHandleObject) -> *const i8 {
    b"Document\0" as *const u8 as *const i8
}

unsafe extern fn _trace(trc: *mut JSTracer, obj: *mut JSObject) { 
}

unsafe extern fn _finalize(_fop: *mut JSFreeOp, obj: *mut JSObject) {
}
}
